-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public._permission_to_role
(
    permission_id integer NOT NULL,
    role_id integer NOT NULL,
    CONSTRAINT _permission_to_role_pkey PRIMARY KEY (permission_id, role_id)
);

CREATE TABLE IF NOT EXISTS public._role_to_user
(
    role_id integer NOT NULL,
    user_id integer NOT NULL,
    CONSTRAINT _role_to_user_pkey PRIMARY KEY (role_id, user_id)
);

CREATE TABLE IF NOT EXISTS public.competition_type
(
    id serial NOT NULL,
    code text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    CONSTRAINT competition_type_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.event
(
    id serial NOT NULL,
    title text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    date_start timestamp(3) without time zone NOT NULL,
    date_end timestamp(3) without time zone NOT NULL,
    city text COLLATE pg_catalog."default",
    country text COLLATE pg_catalog."default",
    CONSTRAINT event_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.flyway_schema_history
(
    installed_rank integer NOT NULL,
    version character varying(50) COLLATE pg_catalog."default",
    description character varying(200) COLLATE pg_catalog."default" NOT NULL,
    type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    script character varying(1000) COLLATE pg_catalog."default" NOT NULL,
    checksum integer,
    installed_by character varying(100) COLLATE pg_catalog."default" NOT NULL,
    installed_on timestamp without time zone NOT NULL DEFAULT now(),
    execution_time integer NOT NULL,
    success boolean NOT NULL,
    CONSTRAINT flyway_schema_history_pk PRIMARY KEY (installed_rank)
);

CREATE TABLE IF NOT EXISTS public.nomination
(
    id serial NOT NULL,
    event_id integer NOT NULL,
    title text COLLATE pg_catalog."default" NOT NULL,
    type_id integer NOT NULL,
    competition_id integer NOT NULL,
    CONSTRAINT nomination_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.nomination_type
(
    id serial NOT NULL,
    code text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    CONSTRAINT nomination_type_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.participant
(
    id serial NOT NULL,
    first_name text COLLATE pg_catalog."default",
    last_name text COLLATE pg_catalog."default",
    CONSTRAINT participant_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.participant_base
(
    id serial NOT NULL,
    first_name character varying COLLATE pg_catalog."default",
    last_name character varying COLLATE pg_catalog."default",
    CONSTRAINT participant_base_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.participant_profile
(
    id serial NOT NULL,
    participant_id integer NOT NULL,
    CONSTRAINT participant_profile_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.permission
(
    id serial NOT NULL,
    code text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT permission_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.point_types
(
    id serial NOT NULL,
    type text COLLATE pg_catalog."default" NOT NULL,
    title text COLLATE pg_catalog."default",
    value integer NOT NULL,
    description text COLLATE pg_catalog."default",
    CONSTRAINT point_types_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.result
(
    id serial NOT NULL,
    place integer NOT NULL,
    nomination_id integer NOT NULL,
    participant_id integer NOT NULL,
    CONSTRAINT result_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.role
(
    id serial NOT NULL,
    code text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT role_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.telegram_profile
(
    id serial NOT NULL,
    first_name text COLLATE pg_catalog."default" NOT NULL,
    last_name text COLLATE pg_catalog."default" NOT NULL,
    user_name text COLLATE pg_catalog."default" NOT NULL,
    user_id integer NOT NULL,
    telegram_id integer NOT NULL,
    CONSTRAINT telegram_profile_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.user_profile
(
    id serial NOT NULL,
    first_name text COLLATE pg_catalog."default",
    last_name text COLLATE pg_catalog."default",
    email text COLLATE pg_catalog."default",
    user_id integer NOT NULL,
    CONSTRAINT user_profile_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id serial NOT NULL,
    CONSTRAINT user_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.vote_like
(
    id serial NOT NULL,
    user_id integer NOT NULL,
    participant_id integer NOT NULL,
    votes_theme_id integer NOT NULL,
    created_at timestamp(3) without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    period_mark text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT vote_like_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.votes_theme
(
    id serial NOT NULL,
    theme_code text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    period_type text COLLATE pg_catalog."default" NOT NULL DEFAULT 'WEEK'::text,
    CONSTRAINT votes_theme_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public._permission_to_role
    ADD CONSTRAINT _permission_to_role_permission_id_fkey FOREIGN KEY (permission_id)
    REFERENCES public.permission (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public._permission_to_role
    ADD CONSTRAINT _permission_to_role_role_id_fkey FOREIGN KEY (role_id)
    REFERENCES public.role (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS _permission_to_role_role_id_idx
    ON public._permission_to_role(role_id);


ALTER TABLE IF EXISTS public._role_to_user
    ADD CONSTRAINT _role_to_user_role_id_fkey FOREIGN KEY (role_id)
    REFERENCES public.role (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public._role_to_user
    ADD CONSTRAINT _role_to_user_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS _role_to_user_user_id_idx
    ON public._role_to_user(user_id);


ALTER TABLE IF EXISTS public.nomination
    ADD CONSTRAINT nomination_competition_id_fkey FOREIGN KEY (competition_id)
    REFERENCES public.competition_type (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS public.nomination
    ADD CONSTRAINT nomination_event_id_fkey FOREIGN KEY (event_id)
    REFERENCES public.event (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS public.nomination
    ADD CONSTRAINT nomination_type_id_fkey FOREIGN KEY (type_id)
    REFERENCES public.nomination_type (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS public.participant_profile
    ADD CONSTRAINT participant_profile_participant_id_fkey FOREIGN KEY (participant_id)
    REFERENCES public.participant (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS participant_profile_participant_id_key
    ON public.participant_profile(participant_id);


ALTER TABLE IF EXISTS public.result
    ADD CONSTRAINT result_nomination_id_fkey FOREIGN KEY (nomination_id)
    REFERENCES public.nomination (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS public.result
    ADD CONSTRAINT result_participant_id_fkey FOREIGN KEY (participant_id)
    REFERENCES public.participant (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS public.telegram_profile
    ADD CONSTRAINT telegram_profile_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS telegram_profile_user_id_key
    ON public.telegram_profile(user_id);


ALTER TABLE IF EXISTS public.user_profile
    ADD CONSTRAINT user_profile_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS user_profile_user_id_key
    ON public.user_profile(user_id);


ALTER TABLE IF EXISTS public.vote_like
    ADD CONSTRAINT vote_like_participant_id_fkey FOREIGN KEY (participant_id)
    REFERENCES public.participant (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS public.vote_like
    ADD CONSTRAINT vote_like_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS public.vote_like
    ADD CONSTRAINT vote_like_votes_theme_id_fkey FOREIGN KEY (votes_theme_id)
    REFERENCES public.votes_theme (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;

END;